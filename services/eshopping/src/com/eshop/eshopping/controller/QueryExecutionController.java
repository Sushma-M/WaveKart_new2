
package com.eshop.eshopping.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.beans.factory.annotation.Qualifier;

import  com.eshop.eshopping.service.EshoppingQueryExecutorService;
import com.wavemaker.runtime.data.model.CustomQuery;
import com.wavemaker.runtime.data.exception.QueryParameterMismatchException;
import com.wordnik.swagger.annotations.*;

@RestController(value = "Eshopping.QueryExecutionController")
@Api(value = "/eshopping/queryExecutor", description = "Controller class for query execution")
@RequestMapping("/eshopping/queryExecutor")
public class QueryExecutionController {

	private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

	@Autowired
	private EshoppingQueryExecutorService queryService;
	
	@ApiOperation(value = "Process request to execute queries")
	@RequestMapping(value = "/queries/Ordered", method = RequestMethod.PUT,consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
	public int executeOrdered(
	       @RequestParam(value="data", required=false) java.lang.String data,
	       @RequestParam(value="data2", required=false) java.lang.String data2
		)
 throws QueryParameterMismatchException{
			LOGGER.debug("Executing named query Ordered");
		int result = queryService.executeOrdered( data , data2 );
		LOGGER.debug("got the result of named query {}", result);
		return result;
	}
	@ApiOperation(value = "Process request to execute queries")
	@RequestMapping(value = "/queries/_Total_Price", method = RequestMethod.GET)
	public Page<Object> execute_Total_Price(
			 @RequestParam(value="data", required=false) java.lang.String data,
		 Pageable pageable)
	     throws QueryParameterMismatchException{
			LOGGER.debug("Executing named query _Total_Price");

		Page<Object> result = queryService.execute_Total_Price(pageable, data);
		LOGGER.debug("got the result of named query {}", result);
		return result;
	}
	@ApiOperation(value = "Process request to execute queries")
	@RequestMapping(value = "/queries/cancelled", method = RequestMethod.PUT,consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
	public int executeCancelled(
	       @RequestParam(value="data", required=false) java.lang.String data,
	       @RequestParam(value="data1", required=false) java.lang.Integer data1
		)
 throws QueryParameterMismatchException{
			LOGGER.debug("Executing named query cancelled");
		int result = queryService.executeCancelled( data , data1 );
		LOGGER.debug("got the result of named query {}", result);
		return result;
	}
	@ApiOperation(value = "Process request to execute queries")
	@RequestMapping(value = "/queries/_Total_InCart", method = RequestMethod.GET)
	public Page<Object> execute_Total_InCart(
		 Pageable pageable)
	    {
			LOGGER.debug("Executing named query _Total_InCart");

		Page<Object> result = queryService.execute_Total_InCart(pageable);
		LOGGER.debug("got the result of named query {}", result);
		return result;
	}
	@ApiOperation(value = "Process request to execute queries")
	@RequestMapping(value = "/queries/_OrderedLists", method = RequestMethod.GET)
	public Page<Object> execute_OrderedLists(
			 @RequestParam(value="LoggedinUserID", required=false) java.lang.Integer LoggedinUserID,
		 Pageable pageable)
	     throws QueryParameterMismatchException{
			LOGGER.debug("Executing named query _OrderedLists");

		Page<Object> result = queryService.execute_OrderedLists(pageable, LoggedinUserID);
		LOGGER.debug("got the result of named query {}", result);
		return result;
	}
	

	@RequestMapping(value = "/queries/wm_custom", method = RequestMethod.POST)
	@ApiOperation(value = "Process request to execute customer queries")
	public Page<Object> executeWMCustomQuery(@RequestBody CustomQuery query, Pageable pageable) {
		Page<Object> result = queryService.executeWMCustomQuerySelect(query, pageable);
		LOGGER.debug("got the result {}" + result);
		return result;
	}

	@RequestMapping(value = "/queries/wm_custom_update", method = RequestMethod.POST)
	@ApiOperation(value = "Process request to execute customer queries")
    public int executeWMCustomQuery(@RequestBody CustomQuery query) {
        int result = queryService.executeWMCustomQueryUpdate(query);
        LOGGER.debug("got the result {}" + result);
        return result;
    }

}

